#!/usr/bin/env bash


# Resolving symlinks
# https://github.com/rbenv/rbenv/blob/29b4da77370af0a3413dce00a72c7631302a2b25/libexec/rbenv#L31-L50
# https://github.com/sstephenson/bats/blob/master/libexec/bats
READLINK=$(type -p greadlink readlink | head -1)
[ -n "$READLINK" ] || abort "cannot find readlink - are you missing GNU coreutils?"

resolve_link() {
  $READLINK "$1"
}

abs_dirname() {
  local cwd="$PWD"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

SINTER_DIR="$(abs_dirname "$0")"

linters() {
  for linter in ${SINTER_DIR}/linters/*; do
    basename "$linter"
  done
}

lint() {
  if [ -n "$SINTER_QUIET" ]; then
    "$1" "$2" &> /dev/null
  else
    "$1" "$2"
  fi
}


command="$1"
case "$command" in
--linters )
  linters
  exit
  ;;

-q | --quiet )
  export SINTER_QUIET=1
  shift
  ;;

* )
  ;;
esac



file="$1"

# open/closed principle: discover linters at runtime so we don't have to
# modify this file when extending functionality with new linters.
#
# this is slower than encapsulating the logic in a factory function here
# or a factory script.  time will tell if it's too slow.
for linter in ${SINTER_DIR}/linters/*; do
  lint "$linter" "$file"
  status=$?

  if [ $status -eq 0 ]; then
    [ -z "$SINTER_QUIET" ] && echo "syntax ok"
    exit 0
  elif [ $status -eq 1 ]; then
    exit 1
  fi
done

echo "no linter for $(basename "$file")" && exit 2

